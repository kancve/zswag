from enum import Enum
import zswag_client
import calculator.api as api


class Mode(Enum):
    POWER_OF_TWO = 1
    SQUARE_ROOT = 2


def print_help():
    print(
        "Help:",
        " INPUT        Any valid input for the current mode.",
        " p            Sets powerOfTwo(int32) mode.",
        " s            Sets squareRoot(double) mode.",
        " h            Prints this help.",
        " q            Quits the client.",
        "",
        "Note that the letter before the '>' denotes the current mode.",
        sep='\n'
    )


def call_power_of_two(client, line):
    try:
        request = api.I32.fromFields(int(line))
    except Exception as e:
        print("Error: '%s' cannot be converted to int32!" % line)
        print(e)
        return
    try:
        response = client.powerOfTwoMethod(request)
    except Exception as e:
        print("Error:", e)
    else:
        print(response.getValue())


def call_square_root(client, line):
    try:
        request = api.Double.fromFields(float(line))
    except Exception as e:
        print("Error: '%s' cannot be converted to double!" % line)
        print(e)
        return
    try:
        response = client.squareRootMethod(request)
    except Exception as e:
        print("Error:", e)
    else:
        print(response.getValue())


def run(host, port):

    print("Welcome to the Zserio Calculator HTTP Client example!")
    print("Write 'h' + ENTER for help.")

    # Calculator client generated by Zserio
    client = api.Calculator.Client(zswag_client.HttpClient(spec=f"http://{host}:{port}/openapi.json"))
    mode = Mode.POWER_OF_TWO

    while True:
        line = input(('p' if mode == Mode.POWER_OF_TWO else 's') + "> ")
        if not line:
            continue

        if line[0] == 'q':
            print("Quit.")
            exit(0)

        if line[0] == 'h':
            print_help()
            continue

        if line[0] == 'p':
            mode = Mode.POWER_OF_TWO
            print("Mode set to powerOfTwo(int32)")
            continue

        if line[0] == 's':
            mode = Mode.SQUARE_ROOT
            print("Mode set to squareRoot(double)")
            continue

        if mode == Mode.POWER_OF_TWO:
            call_power_of_two(client, line)
        else:
            call_square_root(client, line)
